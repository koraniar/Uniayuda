@model Uniayuda.Models.PostViewModel

@{
    ViewBag.Title = (Model.IsEdition ? "Edit" : "Create") + " Post";
}

<h2>@(Model.IsEdition ? "Edit" : "Create") Post</h2>

@using (Html.BeginForm("SavePost", "Post", FormMethod.Post, new { @id = "CreatePost-form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.IsEdition)
        @*<div class="form-group">
                @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsAnonymous, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsAnonymous)
                    @Html.ValidationMessageFor(model => model.IsAnonymous, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back", "Index")
</div>

@section Scripts{
    <script type="text/javascript">
        (function () {
            $("#CreatePost-form").on("submit", function (e) {
                e.preventDefault();
                var form = $("#CreatePost-form");
                if (form.valid()) {
                    $.ajax({
                        type: "POST",
                        url: form.attr('action'),
                        data: form.serialize(),
                        success: function (data) {
                            var message = data.Message;
                            var footer = '<button type="button" class="btn btn-primary" data-dismiss="modal">Accept</button>';
                            var showInfoModal = true;
                            switch (data.ResponseStatus.toString()) {
                                case "@Entities.Enums.ResponseStatus.Success.GetHashCode()":
                                    showInfoModal = false;
                                    var url = "@Url.Action("Index","Dashboard")";
                                    window.location.href = url;
                                    break;
                                case "@Entities.Enums.ResponseStatus.Error.GetHashCode()":
                                    message = "Unexpected error, " + data.Message;
                                    footer = '<button type="button" id="reload" class="btn btn-primary" data-dismiss="modal">Reload</button>';
                                    break;
                            }
                            if (showInfoModal) {
                                showModal("Error", message, footer);
                                $("#reload").click(function () {
                                    location.reload();
                                });
                            }
                        },
                        error: function (data) {
                            console.log("Create Post Error");
                            console.log(data);
                            showModal("Error", "Unexpected error.", '<button type="button" id="reloadRegister" class="btn btn-primary" data-dismiss="modal">Reload</button>');
                            $("#reloadRegister").click(function () {
                                location.reload();
                            });
                        }
                    });
                }
            });
        })();
    </script>
}